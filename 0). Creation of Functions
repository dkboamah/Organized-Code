
############################Creation of Functions############################

##### The functions listed below were used at some point during data preparation, feature selection, and building of models
### For convenience the following code could be saved in a .R file and subsequently accessed via the source() command, so individuals would not need to re-write the code in the command line

### Feature selection functions

## Filter feature selection method using the mRMRE package

mRMR_FS <- function(matrix,exposure,number){
	tr_data <- data.frame(target=exposure, matrix)
	tr_data <- mRMR.data(tr_data)
	set.seed(123)
	mRMR_object <- mRMR.ensemble(data = tr_data, target_indices = 1, feature_count = number, solution_count = 1)
	top_features <- unlist(mRMR_object@filters, use.names=FALSE)
	top_features <- top_features - 1
	return(top_features)
}

## Wrapper feature selection method to identify relevant features for modeling using the Random Forest model

varSelCheck_NoReOrder <- function(matrix,exposure){
  set.seed(123)
  Up_Samp_DF <- upSample(x=matrix,y=exposure)
  Up_Features <- Up_Samp_DF[,1:length(colnames(matrix))]
  Up_Exposure <- Up_Samp_DF[,length(colnames(Up_Samp_DF))]
  
  features_matrix <- Up_Features
  varSel_object <- varSelRF(xdata=features_matrix,Class=Up_Exposure,vars.drop.frac=0.999)
  varSel_imp <- varSel_object$initialImportance
  varSel_imp <- as.data.frame(varSel_imp)
  varSel_imp$Names <- rownames(varSel_imp)
  varSel_imp <- arrange(varSel_imp, desc(varSel_imp[,1]))
  
  for (i in 1:length(rownames(varSel_imp))){
    varSel_imp$Index[i] <- which(colnames(matrix)==varSel_imp$Names[i])
  }
  
  index_vector <- varSel_imp$Index
  return(index_vector)
}




############################################################################
### Data manipulation functions

## The top_features_Matrix function was created to build a matrix of CpG sites and M-values. The inputs are a vector of indexes (determined from a feature selection algorithm) and the matrix that served as an input into the feature selection algorithm.

top_features_Matrix <- function(vector,matrix){
	feature_matrix <- matrix(,nrow = length(rownames(matrix)), ncol = 0) 
	for(i in 1:length(vector)){
		feature_id <- vector[i]
		feature_matrix <- as.matrix(cbind(feature_matrix, matrix[,feature_id]))
colnames(feature_matrix)[i] <- colnames(matrix)[feature_id]
		}
	length(feature_matrix)
	return(feature_matrix)
	}

## The testMatrix_Creation function was created to build a matrix of CpG sites and M-values containing CpG sites of the same identity. The function was created due to the limitation of the top_feautres_Matrix that the indices of one matrix must be in the identical order of another. Additionally, the top_features_Matrix function requires a vector of indices to exist, while the testMatrix_Creation function works with just the two matrices (that derived from the training set and any matrix for Batch 2/test set)

testMatrix_Creation <- function(matrix,testMatrix){
	index_vector <- vector()
	
	for (i in 1:length(colnames(matrix))){
  		current_index <- which(colnames(testMatrix)==colnames(matrix)[i])
  		index_vector <- c(index_vector,current_index)
	}
	
	newMatrix <- top_features_Matrix(vector=index_vector,matrix=testMatrix)
	return(newMatrix)
}

## The Make_Matrix_K function was created to perform density ratio estimation using the KLIEP method.

Make_Matrix_K <- function(matrix,testMatrix){
	testingMatrix <- testMatrix
    
	for(i in 1:length(colnames(matrix))){
		dens_object <- densratio(x=matrix[,i],y=testingMatrix[,i],method="KLIEP")
		weight <- dens_object$compute_density_ratio(testingMatrix[,i])
		testingMatrix[,i] <- weight*testingMatrix[,i]
		print(i)
	}
    return(testingMatrix)
}

## The Make_Matrix_U function was created to perform density ratio estimation using the uLSIF method.

Make_Matrix_U <- function(matrix,testMatrix){
	testingMatrix <- testMatrix
    
	for(i in 1:length(colnames(matrix))){
		dens_object <- densratio(x=matrix[,i],y=testingMatrix[,i],method="uLSIF")
		weight <- dens_object$compute_density_ratio(testingMatrix[,i])
		testingMatrix[,i] <- weight*testingMatrix[,i]
		print(i)
	}
    return(testingMatrix)
}


############################################################################
### Prediction modeling functions

## The following functions were created to build prediction models of type: Random Forests. The following functions produce either the AUC (Area under the ROC curve) and a ROC object (using the pROC package) that can subsequently be added to a plot.

RF_Test_ROC <- function(x,vector,matrix,exposure,testMatrix,testExposure){
	training_resultsDF_rf <- data.frame(cost=numeric(),ROC=numeric(),Sens=numeric(),Spec=numeric(),ROCSD=numeric(),SenseSD=numeric(),SpecSD=numeric())
	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
	testing_matrix <- top_features_Matrix(vector_new,testMatrix)
	
	train_control_rf <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE)
	train_grid_rf <- expand.grid(mtry=c(as.integer(log2((length(colnames(training_matrix))))),as.integer(sqrt((length(colnames(training_matrix)))))))
	
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "rf", trControl = train_control_rf, tuneGrid = train_grid_rf, metric = "Spec")

	predResults <- predict(modelTrain, newdata = testing_matrix,type="prob")
	roc_train_results <- roc(make.names(testExposure), predResults$X1)
	return(roc_train_results)
}

RF_Test_AUC <- function(x,vector,matrix,exposure,testMatrix,testExposure){
	training_resultsDF_rf <- data.frame(cost=numeric(),ROC=numeric(),Sens=numeric(),Spec=numeric(),ROCSD=numeric(),SenseSD=numeric(),SpecSD=numeric())
	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
	testing_matrix <- top_features_Matrix(vector_new,testMatrix)
	
	train_control_rf <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE)
	train_grid_rf <- expand.grid(mtry=c(as.integer(log2((length(colnames(training_matrix))))),as.integer(sqrt((length(colnames(training_matrix)))))))
	
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "rf", trControl = train_control_rf, tuneGrid = train_grid_rf, metric = "Spec")

	predResults <- predict(modelTrain, newdata = testing_matrix,type="prob")
	roc_train_results <- roc(make.names(testExposure), predResults$X1)
  auc_train_results <- auc(roc_train_results)
	return(auc_train_results)
}

## The following functions were created to build prediction models of type: Support Vector Machine w/ linear kernel function (svm-L). The following functions produce either the AUC (Area under the ROC curve) and a ROC object (using the pROC package) that can subsequently be added to a plot.

svmL_Test_ROC <- function(x,vector,matrix,exposure,testMatrix,testExposure){
	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
	testing_matrix <- top_features_Matrix(vector_new,testMatrix)
	
	train_control_svmL <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE)
	train_grid_svmL <- expand.grid(cost=c(10^(-3:2),2^(-5:6)))
  
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmLinear2", trControl = train_control_svmL, tuneGrid = train_grid_svmL, metric = "Spec")

	predResults <- predict(modelTrain, newdata = testing_matrix,type="prob")
	roc_train_results <- roc(make.names(testExposure), predResults$X1)
	return(roc_train_results)
}

svmL_Test_AUC <- function(x,vector,matrix,exposure,testMatrix,testExposure){
	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
	testing_matrix <- top_features_Matrix(vector_new,testMatrix)
	
	train_control_svmL <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE)
	train_grid_svmL <- expand.grid(cost=c(10^(-3:2),2^(-5:6)))
  
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmLinear2", trControl = train_control_svmL, tuneGrid = train_grid_svmL, metric = "Spec")

	predResults <- predict(modelTrain, newdata = testing_matrix,type="prob")
	roc_train_results <- roc(make.names(testExposure), predResults$X1)
	auc_train_results <- auc(roc_train_results)
	return(auc_train_results)
}

## The following functions were created to build prediction models of type: Support Vector Machine w/ radial basis function kernel function (svm-rbf). The following functions produce either the AUC (Area under the ROC curve) and a ROC object (using the pROC package) that can subsequently be added to a plot.

svmR_Test_ROC <- function(x,vector,matrix,exposure,testMatrix,testExposure){
	training_resultsDF_rf <- data.frame(cost=numeric(),ROC=numeric(),Sens=numeric(),Spec=numeric(),ROCSD=numeric(),SenseSD=numeric(),SpecSD=numeric())
	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
	testing_matrix <- top_features_Matrix(vector_new,testMatrix)
	
	train_control_svmR <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE)
	train_grid_svmR <- expand.grid(sigma=c(10^(-6:1)), C=c(10^(-5:2),2^(-5:6)))

	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmRadial", trControl = train_control_svmR, tuneGrid = train_grid_svmR, metric = "Spec")

	predResults <- predict(modelTrain, newdata = testing_matrix,type="prob")
	roc_train_results <- roc(make.names(testExposure), predResults$X1)
	return(roc_train_results)
}

svmR_Test_AUC <- function(x,vector,matrix,exposure,testMatrix,testExposure){
	training_resultsDF_rf <- data.frame(cost=numeric(),ROC=numeric(),Sens=numeric(),Spec=numeric(),ROCSD=numeric(),SenseSD=numeric(),SpecSD=numeric())
	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
	testing_matrix <- top_features_Matrix(vector_new,testMatrix)
	
	train_control_svmR <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE)
	train_grid_svmR <- expand.grid(sigma=c(10^(-6:1)), C=c(10^(-5:2),2^(-5:6)))

	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmRadial", trControl = train_control_svmR, tuneGrid = train_grid_svmR, metric = "Spec")

	predResults <- predict(modelTrain, newdata = testing_matrix,type="prob")
	roc_train_results <- roc(make.names(testExposure), predResults$X1)
	auc_train_results <- auc(roc_train_results)
	return(auc_train_results)
}

### Prediction modeling functions (10-fold cross-validation performance)
## The following functions were created to create either ROC objects (to build ROC curves to be plotted) or calculate AUC values from prediction models. 

RF_Train_Best_Tune <- function(x,vector,matrix,exposure){
 	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)

	train_control_rf <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
	train_grid_rf <- expand.grid(mtry=c(as.integer(log2((length(colnames(training_matrix))))),as.integer(sqrt((length(colnames(training_matrix)))))))
	
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "rf", trControl = train_control_rf, tuneGrid = train_grid_rf, metric = "Spec")
	
  	selectedIndices <- (modelTrain$pred$mtry == as.integer(modelTrain$bestTune))
	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
  	auc_object <- auc(roc_object)
	return(auc_object)
}

RF_Train_Best_Tune_ROC <- function(x,vector,matrix,exposure){
 	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)

	train_control_rf <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
	train_grid_rf <- expand.grid(mtry=c(as.integer(log2((length(colnames(training_matrix))))),as.integer(sqrt((length(colnames(training_matrix)))))))
	
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "rf", trControl = train_control_rf, tuneGrid = train_grid_rf, metric = "Spec")
	
  	selectedIndices <- (modelTrain$pred$mtry == as.integer(modelTrain$bestTune))
	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
  	
	return(roc_object)
}

Random_RF_Train_ROC <- function(x,matrix,exposure){
	training_matrix <- matrix[,sample(ncol(matrix),size=x,replace=FALSE)]
	
	train_control_rf <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
	train_grid_rf <- expand.grid(mtry=c(as.numeric(OG_RF_BestTune$bestTune)))
	
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "rf", trControl = train_control_rf, tuneGrid = train_grid_rf, metric = "Spec")
	
	selectedIndices <- modelTrain$pred$mtry == as.numeric(modelTrain$bestTune)
	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
	return(roc_object)
}

Random_RF_Plot_Train_ROC <- function(x,matrix,exposure){
	training_matrix <- matrix[,sample(ncol(matrix),size=x,replace=FALSE)]
	
	train_control_rf <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
	train_grid_rf <- expand.grid(mtry=c(as.numeric(OG_RF_BestTune$bestTune)))
	
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "rf", trControl = train_control_rf, tuneGrid = train_grid_rf, metric = "Spec")
	
	selectedIndices <- modelTrain$pred$mtry == as.numeric(modelTrain$bestTune)
	plot.roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices], add=TRUE, col="grey", lwd=0.5)
}

svmL_Train_Best_Tune <- function(x,vector,matrix,exposure){
  	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)

  	train_control_svmL <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
  	train_grid_svmL <- expand.grid(cost=c(10^(-3:2),2^(-5:6)))
  
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmLinear2", trControl = train_control_svmL, tuneGrid = train_grid_svmL, metric = "Spec")

  	selectedIndices <- modelTrain$pred$cost == as.numeric(modelTrain$bestTune)
 
	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
  	auc_object <- auc(roc_object)
	return(auc_object)
}

svmL_Train_Best_Tune_ROC <- function(x,vector,matrix,exposure){
  	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)

  	train_control_svmL <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
  	train_grid_svmL <- expand.grid(cost=c(10^(-3:2),2^(-5:6)))
  
	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmLinear2", trControl = train_control_svmL, tuneGrid = train_grid_svmL, metric = "Spec")

  	selectedIndices <- modelTrain$pred$cost == as.numeric(modelTrain$bestTune)
 
	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
  
	return(roc_object)
}

Random_svmL_Train_ROC <- function(x,matrix,exposure){
	training_matrix <- matrix[,sample(ncol(matrix),size=x,replace=FALSE)]
	
	train_control_svmL <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
    	train_grid_svmL <- expand.grid(cost=c(as.numeric(OG_svmL_BestTune$bestTune)))
  
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmLinear2", trControl = train_control_svmL, tuneGrid = train_grid_svmL, metric = "Spec")

    	selectedIndices <- modelTrain$pred$cost == as.numeric(modelTrain$bestTune)
    
    	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
	return(roc_object)
}

Random_svmL_Plot_Train_ROC <- function(x,matrix,exposure){
	training_matrix <- matrix[,sample(ncol(matrix),size=x,replace=FALSE)]
	
	train_control_svmL <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
    	train_grid_svmL <- expand.grid(cost=c(as.numeric(OG_svmL_BestTune$bestTune)))
  
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmLinear2", trControl = train_control_svmL, tuneGrid = train_grid_svmL, metric = "Spec")

    	selectedIndices <- modelTrain$pred$cost == as.numeric(modelTrain$bestTune)
    
    	plot.roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices], add=TRUE, col="grey", lwd=0.5)

}

svmR_Train_Best_Tune <- function(x,vector,matrix,exposure){
  	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
  
	train_control_svmR <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
  	train_grid_svmR <- expand.grid(sigma=c(10^(-6:1)), C=c(10^(-5:2),2^(-5:6)))

	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmRadial", trControl = train_control_svmR, tuneGrid = train_grid_svmR, metric = "Spec")

  	selectedIndices <- ((modelTrain$pred$sigma == as.numeric(modelTrain$bestTune[,1])) & (modelTrain$pred$C == as.numeric(modelTrain$bestTune[,2])))

	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
  	auc_object <- auc(roc_object)
	return(auc_object)
}

svmR_Train_Best_Tune_ROC <- function(x,vector,matrix,exposure){
  	vector_new <- head(vector, n=x)
	training_matrix <- top_features_Matrix(vector_new,matrix)
  
	train_control_svmR <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
  	train_grid_svmR <- expand.grid(sigma=c(10^(-6:1)), C=c(10^(-5:2),2^(-5:6)))

	set.seed(123)
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmRadial", trControl = train_control_svmR, tuneGrid = train_grid_svmR, metric = "Spec")

  	selectedIndices <- ((modelTrain$pred$sigma == as.numeric(modelTrain$bestTune[,1])) & (modelTrain$pred$C == as.numeric(modelTrain$bestTune[,2])))

	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
  
	return(roc_object)
}

Random_svmR_Train_ROC <- function(x,matrix,exposure){
	training_matrix <- matrix[,sample(ncol(matrix),size=x,replace=FALSE)]
	
	train_control_svmR <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
    	train_grid_svmR <- expand.grid(sigma=c(as.numeric(OG_svmR_BestTune$bestTune[,1])), C=c(as.numeric(OG_svmR_BestTune$bestTune[,2])))
	
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmRadial", trControl = train_control_svmR, tuneGrid = train_grid_svmR, metric = "Spec")

    	selectedIndices <- ((modelTrain$pred$sigma == as.numeric(modelTrain$bestTune[,1])) & (modelTrain$pred$C == as.numeric(modelTrain$bestTune[,2])))
    
    	roc_object <- roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices])
	return(roc_object)
}

Random_svmR_Plot_Train_ROC <- function(x,matrix,exposure){
	training_matrix <- matrix[,sample(ncol(matrix),size=x,replace=FALSE)]
	
	train_control_svmR <- trainControl(method = "repeatedcv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary, verbose = FALSE,savePredictions = T)
    	train_grid_svmR <- expand.grid(sigma=c(as.numeric(OG_svmR_BestTune$bestTune[,1])), C=c(as.numeric(OG_svmR_BestTune$bestTune[,2])))
	
	modelTrain <- train(x = training_matrix, y = make.names(exposure), classwt=c(1,(length(which(exposure==0)))/(length(which(exposure==1)))), method = "svmRadial", trControl = train_control_svmR, tuneGrid = train_grid_svmR, metric = "Spec")

    	selectedIndices <- ((modelTrain$pred$sigma == as.numeric(modelTrain$bestTune[,1])) & (modelTrain$pred$C == as.numeric(modelTrain$bestTune[,2])))
    
    	plot.roc(modelTrain$pred$obs[selectedIndices], modelTrain$pred$X1[selectedIndices], add=TRUE, col="grey", lwd=0.5)

}
















